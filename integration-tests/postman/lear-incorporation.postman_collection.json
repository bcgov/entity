{
	"info": {
		"_postman_id": "686024a5-d737-4de7-a4cb-8d620b5a5a2d",
		"name": "lear-incorporation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authentication setup",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b4eaa280-9d3f-44fb-956d-c98a9040e91e",
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"token\", jsonData.access_token);",
							"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
							"",
							"pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));",
							"pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));",
							"pm.environment.set(\"auth_url\", 'https://auth-api-{{env}}.pathfinder.gov.bc.ca/api/v1');",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{staff_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{staff_username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Basic ZW50aXR5LXNlcnZpY2UtYWNjb3VudDphNmI3MDcyMS0zMjQxLTQzYmEtYTI5OC02YjQ0MTI0NjFjNzM=",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "grant_type=client_credentials"
				},
				"url": {
					"raw": "https://sso-{{env}}.pathfinder.gov.bc.ca/auth/realms/{{realm}}/protocol/openid-connect/token",
					"protocol": "https",
					"host": [
						"sso-{{env}}",
						"pathfinder",
						"gov",
						"bc",
						"ca"
					],
					"path": [
						"auth",
						"realms",
						"{{realm}}",
						"protocol",
						"openid-connect",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "create draft incorporation application",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5a2bc121-9e10-4c4d-9dbd-58ad16f2dd03",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"Draft Incorporation Application has expected properties\", function () {",
							"    var responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('filing');",
							"",
							"    var filing = responseData['filing'];",
							"    pm.expect(filing).to.have.property('business');",
							"    pm.expect(filing).to.have.property('header');",
							"    pm.expect(filing).to.have.property('incorporationApplication');",
							"",
							"    var business = filing['business'];",
							"    pm.expect(business).to.have.property('identifier');",
							"",
							"    var header = filing['header'];",
							"    pm.expect(header).to.have.property('accountId');",
							"",
							"    var filing_id = header['filingId']",
							"    pm.environment.set('incorp_app_filing_id', filing_id);",
							"    pm.variables.set('incorp_app_filing_id', filing_id);",
							"",
							"    var expected_account_id = pm.variables.get('test_account_number');",
							"    var accountId = header['accountId']",
							"    pm.expect(+accountId).to.eql(+expected_account_id)",
							"",
							"    var tempRegId = business['identifier']",
							"    pm.environment.set('incorp_app_temp_reg_id', tempRegId);",
							"    pm.variables.set('incorp_app_temp_reg_id', tempRegId);",
							"});",
							"",
							"pm.test(\"Incorporation application temporary registration id is set in environment variables\", function () {",
							"    incorpAppTempRegId = pm.variables.get('incorp_app_temp_reg_id');",
							"    pm.expect(incorpAppTempRegId)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"filing\": {\n        \"header\": {\n            \"accountId\": {{test_account_number}},\n            \"name\": \"incorporationApplication\"\n        },\n        \"business\":{\n        \t\"legalType\": \"BEN\"\t\n        },\n        \"incorporationApplication\": {\n        \t\"nameRequest\": {\n                \"legalType\": \"BEN\"\n            }\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/businesses?draft=true",
					"host": [
						"{{url}}"
					],
					"path": [
						"businesses"
					],
					"query": [
						{
							"key": "draft",
							"value": "true"
						}
					]
				},
				"description": "Create a draft incorporation application with a minimal filing and save the temporary registration number"
			},
			"response": []
		},
		{
			"name": "Verify draft Incorporation Application",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "368e21bc-b8d3-454b-8219-92afa1a4e93c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Draft Incorporation Application has expected properties\", function () {",
							"    var responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('filing');",
							"",
							"    var filing = responseData['filing'];",
							"    console.log('filing', filing);",
							"    pm.expect(filing).to.have.property('business');",
							"    pm.expect(filing).to.have.property('header');",
							"    pm.expect(filing).to.have.property('incorporationApplication');",
							"",
							"    var business = filing['business'];",
							"    pm.expect(business).to.have.property('identifier');",
							"",
							"    var expected_temp_id = pm.variables.get('incorp_app_temp_reg_id');",
							"    var temp_id = business['identifier']",
							"    pm.expect(temp_id).to.eql(expected_temp_id)",
							"",
							"    var header = filing['header'];",
							"    pm.expect(header['status']).to.have.eql('DRAFT');",
							"    pm.expect(header['name']).to.have.eql('incorporationApplication');",
							"    pm.expect(header).to.have.property('filingId');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/businesses/{{incorp_app_temp_reg_id}}/filings",
					"host": [
						"{{url}}"
					],
					"path": [
						"businesses",
						"{{incorp_app_temp_reg_id}}",
						"filings"
					]
				},
				"description": "Call business filings endpoint with the draft incorporation application with temporary registration number and verify response data"
			},
			"response": []
		},
		{
			"name": "Complete Incorporation Application Filing",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "968eb0d7-4664-4a99-abe6-3967fe598a35",
						"exec": [
							"var moment = require('moment')",
							"ia_date = moment().format(\"YYYY-MM-DD\");",
							"pm.variables.set('ia_date', ia_date);",
							"pm.environment.set('ia_date', ia_date);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dfd60232-6e03-4056-b8fe-85f438e81ddb",
						"exec": [
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(202);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"filing\": {\n        \"header\": {\n            \"name\": \"incorporationApplication\",\n            \"certifiedBy\": \"Thomas Engine\",\n            \"date\": \"{{ia_date}}\",\n            \"routingSlipNumber\": \"111111111\"\n        },\n        \"business\": {\n            \"legalType\": \"BEN\",\n            \"identifier\": \"{{incorp_app_temp_reg_id}}\"\n        },\n        \"incorporationApplication\": {\n        \t\"nameRequest\": {\n        \t\t\"legalType\": \"BEN\"\n        \t},\n            \"offices\": {\n                \"registeredOffice\": {\n                    \"deliveryAddress\": {\n                        \"addressCity\": \"Victoria\",\n                        \"addressCountry\": \"CA\",\n                        \"addressRegion\": \"BC\",\n                        \"deliveryInstructions\": \"\",\n                        \"postalCode\": \"V8W 3E6\",\n                        \"streetAddress\": \"200-940 Blanshard St\",\n                        \"streetAddressAdditional\": \"\"\n                    },\n                    \"mailingAddress\": {\n                        \"addressCity\": \"Victoria\",\n                        \"addressCountry\": \"CA\",\n                        \"addressRegion\": \"BC\",\n                        \"deliveryInstructions\": \"\",\n                        \"postalCode\": \"V8W 3E6\",\n                        \"streetAddress\": \"200-940 Blanshard St\",\n                        \"streetAddressAdditional\": \"\"\n                    }\n                },\n                \"recordsOffice\": {\n                    \"deliveryAddress\": {\n                        \"addressCity\": \"Victoria\",\n                        \"addressCountry\": \"CA\",\n                        \"addressRegion\": \"BC\",\n                        \"deliveryInstructions\": \"\",\n                        \"postalCode\": \"V8W 3E6\",\n                        \"streetAddress\": \"200-940 Blanshard St\",\n                        \"streetAddressAdditional\": \"\"\n                    },\n                    \"mailingAddress\": {\n                        \"addressCity\": \"Victoria\",\n                        \"addressCountry\": \"CA\",\n                        \"addressRegion\": \"BC\",\n                        \"deliveryInstructions\": \"\",\n                        \"postalCode\": \"V8W 3E6\",\n                        \"streetAddress\": \"200-940 Blanshard St\",\n                        \"streetAddressAdditional\": \"\"\n                    }\n                }\n            },\n            \"contactPoint\": {\n                \"email\": \"test@my.company.com\",\n                \"phone\": \"250-777-8888\",\n                \"extension\": \"2222\"\n            },\n            \"parties\": [\n                {\n                    \"officer\": {\n                        \"id\": 0,\n                        \"firstName\": \"Thomas\",\n                        \"lastName\": \"Engine\",\n                        \"middleName\": \"The\",\n                        \"orgName\": \"\",\n                        \"partyType\": \"Person\",\n                        \"email\": \"test@test.com\"\n                    },\n                    \"roles\": [\n                        {\n                            \"roleType\": \"Completing Party\",\n                            \"appointmentDate\": \"{{ia_date}}\"\n                        },\n                        {\n                            \"roleType\": \"Incorporator\",\n                            \"appointmentDate\": \"{{ia_date}}\"\n                        },\n                        {\n                            \"roleType\": \"Director\",\n                            \"appointmentDate\": \"{{ia_date}}\"\n                        }\n                    ],\n                    \"mailingAddress\": {\n                        \"streetAddress\": \"200-940 Blanshard St\",\n                        \"streetAddressAdditional\": \"\",\n                        \"addressCity\": \"Victoria\",\n                        \"addressRegion\": \"BC\",\n                        \"postalCode\": \"V8W 3E6\",\n                        \"addressCountry\": \"CA\"\n                    },\n                    \"deliveryAddress\": {\n                        \"streetAddress\": \"200-940 Blanshard St\",\n                        \"streetAddressAdditional\": \"\",\n                        \"addressCity\": \"Victoria\",\n                        \"addressRegion\": \"BC\",\n                        \"postalCode\": \"V8W 3E6\",\n                        \"addressCountry\": \"CA\"\n                    }\n                }\n            ],\n            \"shareClasses\": [\n                {\n                    \"id\": 1,\n                    \"priority\": 1,\n                    \"type\": \"Class\",\n                    \"name\": \"Common Shares\",\n                    \"hasMaximumShares\": false,\n                    \"maxNumberOfShares\": null,\n                    \"hasParValue\": false,\n                    \"parValue\": null,\n                    \"currency\": null,\n                    \"hasRightsOrRestrictions\": false,\n                    \"series\": []\n                },\n                {\n                    \"id\": 2,\n                    \"priority\": 2,\n                    \"type\": \"Class\",\n                    \"name\": \"Class A Shares\",\n                    \"hasMaximumShares\": true,\n                    \"maxNumberOfShares\": \"999\",\n                    \"hasParValue\": true,\n                    \"parValue\": \"1.00\",\n                    \"currency\": \"CAD\",\n                    \"hasRightsOrRestrictions\": true,\n                    \"series\": [\n                        {\n                            \"id\": 1,\n                            \"priority\": 1,\n                            \"type\": \"Series\",\n                            \"name\": \"Class A Voting Shares\",\n                            \"hasMaximumShares\": true,\n                            \"maxNumberOfShares\": \"150\",\n                            \"hasParValue\": true,\n                            \"parValue\": \"1.00\",\n                            \"currency\": \"CAD\",\n                            \"hasRightsOrRestrictions\": true\n                        },\n                        {\n                            \"id\": 2,\n                            \"priority\": 2,\n                            \"type\": \"Series\",\n                            \"name\": \"Class A Non-voting Shares\",\n                            \"hasMaximumShares\": true,\n                            \"maxNumberOfShares\": \"800\",\n                            \"hasParValue\": true,\n                            \"parValue\": \"1.00\",\n                            \"currency\": \"CAD\",\n                            \"hasRightsOrRestrictions\": false\n                        }\n                    ]\n                }\n            ],\n            \"incorporationAgreement\": {\n                \"agreementType\": \"sample\"\n            }\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/businesses/{{incorp_app_temp_reg_id}}/filings/{{incorp_app_filing_id}}?draft=false",
					"host": [
						"{{url}}"
					],
					"path": [
						"businesses",
						"{{incorp_app_temp_reg_id}}",
						"filings",
						"{{incorp_app_filing_id}}"
					],
					"query": [
						{
							"key": "draft",
							"value": "false"
						}
					]
				},
				"description": "Update business filing with a complete filing with draft=false and use route slip number for payment"
			},
			"response": []
		},
		{
			"name": "Delay for PAID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/delay/3",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"delay",
						"3"
					]
				},
				"description": "Wait for payment to go through"
			},
			"response": []
		},
		{
			"name": "Verify paid Incorporation Application",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9ca7d89a-5677-4139-a3f2-23f9bf62c53a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Completed Incorporation Application has expected properties\", function () {",
							"    var responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('filing');",
							"",
							"    // Check general filing structure",
							"    var filing = responseData['filing'];",
							"    pm.expect(filing).to.have.property('business');",
							"    pm.expect(filing).to.have.property('header');",
							"    pm.expect(filing).to.have.property('incorporationApplication');",
							"",
							"    // Check business properties",
							"    var business = filing['business'];",
							"    pm.expect(business).to.have.property('identifier');",
							"",
							"    // Check header properties",
							"    var header = filing['header'];",
							"    pm.expect(header).to.have.property('filingId');",
							"    pm.expect(header).to.have.property('paymentToken');",
							"    pm.expect(header['status']).to.be.oneOf(['PAID', 'COMPLETED']);",
							"    pm.expect(header['name']).to.have.eql('incorporationApplication');",
							"    pm.expect(header['paymentStatusCode']).to.eql('COMPLETED');",
							"    pm.expect(header['certifiedBy']).to.have.eql('Thomas Engine');",
							"    pm.expect(header['routingSlipNumber']).to.have.eql('111111111');",
							"    ",
							"    // Check general incorporation application structure",
							"    var incorpApp = filing['incorporationApplication'];",
							"    pm.expect(incorpApp).to.have.property('contactPoint');",
							"    pm.expect(incorpApp).to.have.property('incorporationAgreement');",
							"    pm.expect(incorpApp).to.have.property('offices');",
							"    pm.expect(incorpApp['offices']).to.have.property('recordsOffice');",
							"    pm.expect(incorpApp['offices']['recordsOffice']).to.have.property('deliveryAddress');",
							"    pm.expect(incorpApp['offices']['recordsOffice']).to.have.property('mailingAddress');",
							"    pm.expect(incorpApp['offices']).to.have.property('registeredOffice');",
							"    pm.expect(incorpApp['offices']['registeredOffice']).to.have.property('deliveryAddress');",
							"    pm.expect(incorpApp['offices']['registeredOffice']).to.have.property('mailingAddress');",
							"    pm.expect(incorpApp).to.have.property('parties');",
							"    pm.expect(incorpApp).to.have.property('shareClasses');",
							"",
							"    // Check contacts",
							"    pm.expect(incorpApp['contactPoint']['email']).to.have.eql('test@my.company.com');",
							"    pm.expect(incorpApp['contactPoint']['extension']).to.have.eql('2222');",
							"    pm.expect(incorpApp['contactPoint']['phone']).to.have.eql('250-777-8888');",
							"",
							"    // Check incorporation agreement",
							"    pm.expect(incorpApp['incorporationAgreement']['agreementType']).to.have.eql('sample');",
							"",
							"    // Check records office",
							"    var recordsOffice = incorpApp['offices']['recordsOffice'];",
							"    pm.expect(recordsOffice['deliveryAddress']['addressCity']).to.have.eql('Victoria');",
							"    pm.expect(recordsOffice['deliveryAddress']['addressCountry']).to.have.eql('CA');",
							"    pm.expect(recordsOffice['deliveryAddress']['addressRegion']).to.have.eql('BC');",
							"    pm.expect(recordsOffice['deliveryAddress']['postalCode']).to.have.eql('V8W 3E6');",
							"    pm.expect(recordsOffice['deliveryAddress']['streetAddress']).to.have.eql('200-940 Blanshard St');",
							"    pm.expect(recordsOffice['mailingAddress']['addressCity']).to.have.eql('Victoria');",
							"    pm.expect(recordsOffice['mailingAddress']['addressCountry']).to.have.eql('CA');",
							"    pm.expect(recordsOffice['mailingAddress']['addressRegion']).to.have.eql('BC');",
							"    pm.expect(recordsOffice['mailingAddress']['postalCode']).to.have.eql('V8W 3E6');",
							"    pm.expect(recordsOffice['mailingAddress']['streetAddress']).to.have.eql('200-940 Blanshard St');",
							"    ",
							"    // Check registered office",
							"    var registeredOffice = incorpApp['offices']['registeredOffice'];",
							"    pm.expect(registeredOffice['deliveryAddress']['addressCity']).to.have.eql('Victoria');",
							"    pm.expect(registeredOffice['deliveryAddress']['addressCountry']).to.have.eql('CA');",
							"    pm.expect(registeredOffice['deliveryAddress']['addressRegion']).to.have.eql('BC');",
							"    pm.expect(registeredOffice['deliveryAddress']['postalCode']).to.have.eql('V8W 3E6');",
							"    pm.expect(registeredOffice['deliveryAddress']['streetAddress']).to.have.eql('200-940 Blanshard St');",
							"    pm.expect(registeredOffice['mailingAddress']['addressCity']).to.have.eql('Victoria');",
							"    pm.expect(registeredOffice['mailingAddress']['addressCountry']).to.have.eql('CA');",
							"    pm.expect(registeredOffice['mailingAddress']['addressRegion']).to.have.eql('BC');",
							"    pm.expect(registeredOffice['mailingAddress']['postalCode']).to.have.eql('V8W 3E6');",
							"    pm.expect(registeredOffice['mailingAddress']['streetAddress']).to.have.eql('200-940 Blanshard St');",
							"",
							"    // Check parties",
							"    var parties = incorpApp['parties'][0];",
							"    ",
							"    pm.expect(parties['deliveryAddress']['addressCity']).to.have.eql('Victoria');",
							"    pm.expect(parties['deliveryAddress']['addressCountry']).to.have.eql('CA');",
							"    pm.expect(parties['deliveryAddress']['addressRegion']).to.have.eql('BC');",
							"    pm.expect(parties['deliveryAddress']['postalCode']).to.have.eql('V8W 3E6');",
							"    pm.expect(parties['deliveryAddress']['streetAddress']).to.have.eql('200-940 Blanshard St');",
							"    pm.expect(parties['mailingAddress']['addressCity']).to.have.eql('Victoria');",
							"    pm.expect(parties['mailingAddress']['addressCountry']).to.have.eql('CA');",
							"    pm.expect(parties['mailingAddress']['addressRegion']).to.have.eql('BC');",
							"    pm.expect(parties['mailingAddress']['postalCode']).to.have.eql('V8W 3E6');",
							"    pm.expect(parties['mailingAddress']['streetAddress']).to.have.eql('200-940 Blanshard St');",
							"",
							"    pm.expect(parties['officer']['email']).to.have.eql('test@test.com');",
							"    pm.expect(parties['officer']['firstName']).to.have.eql('Thomas');",
							"    pm.expect(parties['officer']['lastName']).to.have.eql('Engine');",
							"    pm.expect(parties['officer']['middleName']).to.have.eql('The');",
							"    pm.expect(parties['officer']['partyType']).to.have.eql('Person');",
							"    pm.expect(parties['officer']['orgName']).to.have.eql('');",
							"    ",
							"    // Check roles",
							"    ia_date = pm.environment.get('ia_date');",
							"    var roles = parties['roles'];",
							"",
							"    pm.expect(roles[0]['appointmentDate']).to.have.eql(ia_date);",
							"    pm.expect(roles[0]['roleType']).to.have.eql('Completing Party');",
							"    pm.expect(roles[1]['appointmentDate']).to.have.eql(ia_date);",
							"    pm.expect(roles[1]['roleType']).to.have.eql('Incorporator');",
							"    pm.expect(roles[2]['appointmentDate']).to.have.eql(ia_date);",
							"    pm.expect(roles[2]['roleType']).to.have.eql('Director');",
							"",
							"    // Check share classes",
							"    var shareClasses = incorpApp['shareClasses'];",
							"    pm.expect(shareClasses[0]['currency']).to.have.eql(null);",
							"    pm.expect(shareClasses[0]['hasMaximumShares']).to.have.eql(false);",
							"    pm.expect(shareClasses[0]['hasParValue']).to.have.eql(false);",
							"    pm.expect(shareClasses[0]['hasRightsOrRestrictions']).to.have.eql(false);",
							"    pm.expect(shareClasses[0]['maxNumberOfShares']).to.have.eql(null);",
							"    pm.expect(shareClasses[0]['name']).to.have.eql('Common Shares');",
							"    pm.expect(shareClasses[0]['parValue']).to.have.eql(null);",
							"    pm.expect(shareClasses[0]['priority']).to.have.eql(1);",
							"    pm.expect(shareClasses[0]['series']).to.have.eql([]);",
							"    pm.expect(shareClasses[0]['type']).to.have.eql('Class');",
							"",
							"    pm.expect(shareClasses[1]['currency']).to.have.eql('CAD');",
							"    pm.expect(shareClasses[1]['hasMaximumShares']).to.have.eql(true);",
							"    pm.expect(shareClasses[1]['hasParValue']).to.have.eql(true);",
							"    pm.expect(shareClasses[1]['hasRightsOrRestrictions']).to.have.eql(true);",
							"    pm.expect(shareClasses[1]['maxNumberOfShares']).to.have.eql('999');",
							"    pm.expect(shareClasses[1]['name']).to.have.eql('Class A Shares');",
							"    pm.expect(shareClasses[1]['parValue']).to.have.eql('1.00');",
							"    pm.expect(shareClasses[1]['priority']).to.have.eql(2);",
							"    pm.expect(shareClasses[1]['type']).to.have.eql('Class');",
							"    pm.expect(shareClasses[1]['series']).to.have.lengthOf(2);",
							"",
							"    var series = shareClasses[1]['series'];",
							"    pm.expect(series[0]['currency']).to.have.eql('CAD');",
							"    pm.expect(series[0]['hasMaximumShares']).to.have.eql(true);",
							"    pm.expect(series[0]['hasParValue']).to.have.eql(true);",
							"    pm.expect(series[0]['hasRightsOrRestrictions']).to.have.eql(true);",
							"    pm.expect(series[0]['maxNumberOfShares']).to.have.eql(\"150\");",
							"    pm.expect(series[0]['name']).to.have.eql('Class A Voting Shares');",
							"    pm.expect(series[0]['parValue']).to.have.eql('1.00');",
							"    pm.expect(series[0]['priority']).to.have.eql(1);",
							"    pm.expect(series[0]['type']).to.have.eql('Series');",
							"",
							"    pm.expect(series[1]['currency']).to.have.eql('CAD');",
							"    pm.expect(series[1]['hasMaximumShares']).to.have.eql(true);",
							"    pm.expect(series[1]['hasParValue']).to.have.eql(true);",
							"    pm.expect(series[1]['hasRightsOrRestrictions']).to.have.eql(false);",
							"    pm.expect(series[1]['maxNumberOfShares']).to.have.eql(\"800\");",
							"    pm.expect(series[1]['name']).to.have.eql('Class A Non-voting Shares');",
							"    pm.expect(series[1]['parValue']).to.have.eql('1.00');",
							"    pm.expect(series[1]['priority']).to.have.eql(2);",
							"    pm.expect(series[1]['type']).to.have.eql('Series');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/businesses/{{incorp_app_temp_reg_id}}/filings/{{incorp_app_filing_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"businesses",
						"{{incorp_app_temp_reg_id}}",
						"filings",
						"{{incorp_app_filing_id}}"
					]
				},
				"description": "Call business filings endpoint with the temporary registration number and filing id to verify response data"
			},
			"response": []
		},
		{
			"name": "Delay for COMPLETED",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6807ba52-54c6-4972-b932-396c429b80ab",
						"exec": [
							"// Delay to wait for completed",
							"console.log('Delay 30s to wait for completed status')",
							"setTimeout(function(){}, 30000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/delay/10",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"delay",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify completed Incorporation Application",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fbd73fa7-c322-4038-b860-4e999a2c7193",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Completed Incorporation Application has expected properties\", function () {",
							"    var responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('filing');",
							"",
							"    // Check general filing structure",
							"    var filing = responseData['filing'];",
							"    pm.expect(filing).to.have.property('business');",
							"    pm.expect(filing).to.have.property('header');",
							"    pm.expect(filing).to.have.property('incorporationApplication');",
							"",
							"    // Check header properties",
							"    var header = filing['header'];",
							"    pm.expect(header).to.have.property('filingId');",
							"    pm.expect(header).to.have.property('paymentToken');",
							"    pm.expect(header['status']).to.have.eql('COMPLETED');",
							"    pm.expect(header['name']).to.have.eql('incorporationApplication');",
							"    pm.expect(header['paymentStatusCode']).to.have.eql('COMPLETED');",
							"    pm.expect(header['certifiedBy']).to.have.eql('Thomas Engine');",
							"    pm.expect(header['routingSlipNumber']).to.have.eql('111111111');",
							"    ",
							"    // Check general incorporation application structure",
							"    var incorpApp = filing['incorporationApplication'];",
							"    pm.expect(incorpApp).to.have.property('contactPoint');",
							"    pm.expect(incorpApp).to.have.property('incorporationAgreement');",
							"    pm.expect(incorpApp).to.have.property('offices');",
							"    pm.expect(incorpApp['offices']).to.have.property('recordsOffice');",
							"    pm.expect(incorpApp['offices']['recordsOffice']).to.have.property('deliveryAddress');",
							"    pm.expect(incorpApp['offices']['recordsOffice']).to.have.property('mailingAddress');",
							"    pm.expect(incorpApp['offices']).to.have.property('registeredOffice');",
							"    pm.expect(incorpApp['offices']['registeredOffice']).to.have.property('deliveryAddress');",
							"    pm.expect(incorpApp['offices']['registeredOffice']).to.have.property('mailingAddress');",
							"    pm.expect(incorpApp).to.have.property('parties');",
							"    pm.expect(incorpApp).to.have.property('shareClasses');",
							"",
							"    // Check contacts",
							"    pm.expect(incorpApp['contactPoint']['email']).to.have.eql('test@my.company.com');",
							"    pm.expect(incorpApp['contactPoint']['extension']).to.have.eql('2222');",
							"    pm.expect(incorpApp['contactPoint']['phone']).to.have.eql('250-777-8888');",
							"",
							"    // Check incorporation agreement",
							"    pm.expect(incorpApp['incorporationAgreement']['agreementType']).to.have.eql('sample');",
							"",
							"    // Check records office",
							"    var recordsOffice = incorpApp['offices']['recordsOffice'];",
							"    pm.expect(recordsOffice['deliveryAddress']['addressCity']).to.have.eql('Victoria');",
							"    pm.expect(recordsOffice['deliveryAddress']['addressCountry']).to.have.eql('CA');",
							"    pm.expect(recordsOffice['deliveryAddress']['addressRegion']).to.have.eql('BC');",
							"    pm.expect(recordsOffice['deliveryAddress']['postalCode']).to.have.eql('V8W 3E6');",
							"    pm.expect(recordsOffice['deliveryAddress']['streetAddress']).to.have.eql('200-940 Blanshard St');",
							"    pm.expect(recordsOffice['mailingAddress']['addressCity']).to.have.eql('Victoria');",
							"    pm.expect(recordsOffice['mailingAddress']['addressCountry']).to.have.eql('CA');",
							"    pm.expect(recordsOffice['mailingAddress']['addressRegion']).to.have.eql('BC');",
							"    pm.expect(recordsOffice['mailingAddress']['postalCode']).to.have.eql('V8W 3E6');",
							"    pm.expect(recordsOffice['mailingAddress']['streetAddress']).to.have.eql('200-940 Blanshard St');",
							"    ",
							"    // Check registered office",
							"    var registeredOffice = incorpApp['offices']['registeredOffice'];",
							"    pm.expect(registeredOffice['deliveryAddress']['addressCity']).to.have.eql('Victoria');",
							"    pm.expect(registeredOffice['deliveryAddress']['addressCountry']).to.have.eql('CA');",
							"    pm.expect(registeredOffice['deliveryAddress']['addressRegion']).to.have.eql('BC');",
							"    pm.expect(registeredOffice['deliveryAddress']['postalCode']).to.have.eql('V8W 3E6');",
							"    pm.expect(registeredOffice['deliveryAddress']['streetAddress']).to.have.eql('200-940 Blanshard St');",
							"    pm.expect(registeredOffice['mailingAddress']['addressCity']).to.have.eql('Victoria');",
							"    pm.expect(registeredOffice['mailingAddress']['addressCountry']).to.have.eql('CA');",
							"    pm.expect(registeredOffice['mailingAddress']['addressRegion']).to.have.eql('BC');",
							"    pm.expect(registeredOffice['mailingAddress']['postalCode']).to.have.eql('V8W 3E6');",
							"    pm.expect(registeredOffice['mailingAddress']['streetAddress']).to.have.eql('200-940 Blanshard St');",
							"",
							"    // Check parties",
							"    var parties = incorpApp['parties'][0];",
							"    ",
							"    pm.expect(parties['deliveryAddress']['addressCity']).to.have.eql('Victoria');",
							"    pm.expect(parties['deliveryAddress']['addressCountry']).to.have.eql('CA');",
							"    pm.expect(parties['deliveryAddress']['addressRegion']).to.have.eql('BC');",
							"    pm.expect(parties['deliveryAddress']['postalCode']).to.have.eql('V8W 3E6');",
							"    pm.expect(parties['deliveryAddress']['streetAddress']).to.have.eql('200-940 Blanshard St');",
							"    pm.expect(parties['mailingAddress']['addressCity']).to.have.eql('Victoria');",
							"    pm.expect(parties['mailingAddress']['addressCountry']).to.have.eql('CA');",
							"    pm.expect(parties['mailingAddress']['addressRegion']).to.have.eql('BC');",
							"    pm.expect(parties['mailingAddress']['postalCode']).to.have.eql('V8W 3E6');",
							"    pm.expect(parties['mailingAddress']['streetAddress']).to.have.eql('200-940 Blanshard St');",
							"",
							"    pm.expect(parties['officer']['email']).to.have.eql('test@test.com');",
							"    pm.expect(parties['officer']['firstName']).to.have.eql('Thomas');",
							"    pm.expect(parties['officer']['lastName']).to.have.eql('Engine');",
							"    pm.expect(parties['officer']['middleName']).to.have.eql('The');",
							"    pm.expect(parties['officer']['partyType']).to.have.eql('Person');",
							"    pm.expect(parties['officer']['orgName']).to.have.eql('');",
							"    ",
							"    // Check roles",
							"    ia_date = pm.environment.get('ia_date');",
							"    var roles = parties['roles'];",
							"",
							"    pm.expect(roles[0]['appointmentDate']).to.have.eql(ia_date);",
							"    pm.expect(roles[0]['roleType']).to.have.eql('Completing Party');",
							"    pm.expect(roles[1]['appointmentDate']).to.have.eql(ia_date);",
							"    pm.expect(roles[1]['roleType']).to.have.eql('Incorporator');",
							"    pm.expect(roles[2]['appointmentDate']).to.have.eql(ia_date);",
							"    pm.expect(roles[2]['roleType']).to.have.eql('Director');",
							"",
							"    // Check share classes",
							"    var shareClasses = incorpApp['shareClasses'];",
							"    pm.expect(shareClasses[0]['currency']).to.have.eql(null);",
							"    pm.expect(shareClasses[0]['hasMaximumShares']).to.have.eql(false);",
							"    pm.expect(shareClasses[0]['hasParValue']).to.have.eql(false);",
							"    pm.expect(shareClasses[0]['hasRightsOrRestrictions']).to.have.eql(false);",
							"    pm.expect(shareClasses[0]['maxNumberOfShares']).to.have.eql(null);",
							"    pm.expect(shareClasses[0]['name']).to.have.eql('Common Shares');",
							"    pm.expect(shareClasses[0]['parValue']).to.have.eql(null);",
							"    pm.expect(shareClasses[0]['priority']).to.have.eql(1);",
							"    pm.expect(shareClasses[0]['series']).to.have.eql([]);",
							"    pm.expect(shareClasses[0]['type']).to.have.eql('Class');",
							"",
							"    pm.expect(shareClasses[1]['currency']).to.have.eql('CAD');",
							"    pm.expect(shareClasses[1]['hasMaximumShares']).to.have.eql(true);",
							"    pm.expect(shareClasses[1]['hasParValue']).to.have.eql(true);",
							"    pm.expect(shareClasses[1]['hasRightsOrRestrictions']).to.have.eql(true);",
							"    pm.expect(shareClasses[1]['maxNumberOfShares']).to.have.eql('999');",
							"    pm.expect(shareClasses[1]['name']).to.have.eql('Class A Shares');",
							"    pm.expect(shareClasses[1]['parValue']).to.have.eql('1.00');",
							"    pm.expect(shareClasses[1]['priority']).to.have.eql(2);",
							"    pm.expect(shareClasses[1]['type']).to.have.eql('Class');",
							"    pm.expect(shareClasses[1]['series']).to.have.lengthOf(2);",
							"",
							"    var series = shareClasses[1]['series'];",
							"    pm.expect(series[0]['currency']).to.have.eql('CAD');",
							"    pm.expect(series[0]['hasMaximumShares']).to.have.eql(true);",
							"    pm.expect(series[0]['hasParValue']).to.have.eql(true);",
							"    pm.expect(series[0]['hasRightsOrRestrictions']).to.have.eql(true);",
							"    pm.expect(series[0]['maxNumberOfShares']).to.have.eql(\"150\");",
							"    pm.expect(series[0]['name']).to.have.eql('Class A Voting Shares');",
							"    pm.expect(series[0]['parValue']).to.have.eql('1.00');",
							"    pm.expect(series[0]['priority']).to.have.eql(1);",
							"    pm.expect(series[0]['type']).to.have.eql('Series');",
							"",
							"    pm.expect(series[1]['currency']).to.have.eql('CAD');",
							"    pm.expect(series[1]['hasMaximumShares']).to.have.eql(true);",
							"    pm.expect(series[1]['hasParValue']).to.have.eql(true);",
							"    pm.expect(series[1]['hasRightsOrRestrictions']).to.have.eql(false);",
							"    pm.expect(series[1]['maxNumberOfShares']).to.have.eql(\"800\");",
							"    pm.expect(series[1]['name']).to.have.eql('Class A Non-voting Shares');",
							"    pm.expect(series[1]['parValue']).to.have.eql('1.00');",
							"    pm.expect(series[1]['priority']).to.have.eql(2);",
							"    pm.expect(series[1]['type']).to.have.eql('Series');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/businesses/{{incorp_app_temp_reg_id}}/filings/{{incorp_app_filing_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"businesses",
						"{{incorp_app_temp_reg_id}}",
						"filings",
						"{{incorp_app_filing_id}}"
					]
				},
				"description": "Call business filings endpoint with the temporary registration number and filing id to verify response data"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "39675f95-9cc3-42b6-9960-9e72ff042344",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d637c25e-62ce-4eff-873e-5e465fd356ad",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}