{
	"info": {
		"_postman_id": "f5c5bfac-fe78-4d40-ac9b-823c7d4db44e",
		"name": "colin-verify-incorp",
		"description": "version=0.108 - This is a Colin API description",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "verify-incorporation",
			"item": [
				{
					"name": "authentication setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "112c0ea8-684d-40d6-be60-e6f987eb5f53",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"token\", jsonData.access_token);",
									"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"",
									"pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));",
									"pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));",
									"pm.environment.set(\"auth_url\", 'https://auth-api-{{env}}.pathfinder.gov.bc.ca/api/v1');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=client_credentials",
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "https://sso-{{env}}.pathfinder.gov.bc.ca/auth/realms/{{realm}}/protocol/openid-connect/token",
							"protocol": "https",
							"host": [
								"sso-{{env}}",
								"pathfinder",
								"gov",
								"bc",
								"ca"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET identifier",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f77fd86d-64ae-4b88-8002-7202074e080f",
								"exec": [
									"pm.environment.set(\"businessIdentifier\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95130993-3b8e-43d5-a2a3-a3c982b1d98c",
								"exec": [
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be okay to process\", function () { ",
									"    pm.response.to.not.be.error; ",
									"    pm.response.to.not.have.jsonBody(\"error\"); ",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Verify that the account has a BC entity affiliation\",  () => {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('entities');",
									"",
									"    var entities = responseData['entities'];",
									"    if(entities.length !== 29) {",
									"        postman.setNextRequest(null);",
									"        throw new Error(`Incorrect number of affiliations : ` + entities.length)",
									"    }",
									"    ",
									"    var identifier=''",
									"    _.each(entities, (arrItem) => {",
									"        if (arrItem.corpType.code === 'BC') {",
									"            identifier=arrItem.businessIdentifier",
									"            pm.environment.set(\"businessIdentifier\", arrItem.businessIdentifier.substring(2));",
									"        }",
									"    })",
									"    ",
									"    if (identifier === '') {",
									"        // Will not execute further requests in the collection if no identifier",
									"        postman.setNextRequest(null);",
									"        throw new Error(`The account does not have an affiliated Benefit Company`)",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auth_url}}/orgs/{{test_account_number}}/affiliations",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"orgs",
								"{{test_account_number}}",
								"affiliations"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Business",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e93451f2-01f3-451a-bb82-643beb9d81f1",
								"exec": [
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('should return JSON', function () {",
									"    pm.response.to.have.header('Content-Type', 'application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/businesses/BC/{{businessIdentifier}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"businesses",
								"BC",
								"{{businessIdentifier}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Office",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65f982d7-f7f6-40e1-a327-ece856431b7f",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('should return JSON', function () {",
									"    pm.response.to.have.header('Content-Type', 'application/json');",
									"});",
									"",
									"pm.test(\"Returns the required fields for registered office\", () => {",
									"    pm.expect(jsonData.registeredOffice).to.exist",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/businesses/BC/{{businessIdentifier}}/office",
							"host": [
								"{{url}}"
							],
							"path": [
								"businesses",
								"BC",
								"{{businessIdentifier}}",
								"office"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Parties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e71910b4-ae12-448e-9c65-ed29fecca30e",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('should return JSON', function () {",
									"    pm.response.to.have.header('Content-Type', 'application/json');",
									"});",
									"",
									"pm.test(\"Returns the required fields directors\", () => {",
									"    pm.expect(jsonData.directors).to.exist",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/businesses/BC/{{businessIdentifier}}/parties?partyType=Director",
							"host": [
								"{{url}}"
							],
							"path": [
								"businesses",
								"BC",
								"{{businessIdentifier}}",
								"parties"
							],
							"query": [
								{
									"key": "partyType",
									"value": "Director"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Business Name NB",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67c02b86-857d-4770-9c3c-82b5b01439dd",
								"exec": [
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('should return JSON', function () {",
									"    pm.response.to.have.header('Content-Type', 'application/json');",
									"});",
									"",
									"pm.test(\"Returns name objects containing name\", () => {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.names).to.exist",
									"    for (var i=0; i<jsonData.names.length; i++) {",
									"        pm.expect(jsonData.names[i].legalName).to.exist",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/businesses/BC/{{businessIdentifier}}/names/NB",
							"host": [
								"{{url}}"
							],
							"path": [
								"businesses",
								"BC",
								"{{businessIdentifier}}",
								"names",
								"NB"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Business Name CO",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b66def2f-bc29-4746-b49c-f018b302fd5f",
								"exec": [
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns name objects containing name\", () => {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.names).to.exist",
									"    for (var i=0; i<jsonData.names.length; i++) {",
									"        pm.expect(jsonData.names[i].legalName).to.exist",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/businesses/BC/{{businessIdentifier}}/names/CO",
							"host": [
								"{{url}}"
							],
							"path": [
								"businesses",
								"BC",
								"{{businessIdentifier}}",
								"names",
								"CO"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Business Names TR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "679884b8-8e09-4151-811e-3f4232b73ecb",
								"exec": [
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('should return JSON', function () {",
									"    pm.response.to.have.header('Content-Type', 'application/json');",
									"});",
									"",
									"pm.test(\"Returns name objects containing name\", () => {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.names).to.exist",
									"    for (var i=0; i<jsonData.names.length; i++) {",
									"        pm.expect(jsonData.names[i].legalName).to.exist",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/businesses/BC/{{businessIdentifier}}/names/TR",
							"host": [
								"{{url}}"
							],
							"path": [
								"businesses",
								"BC",
								"{{businessIdentifier}}",
								"names",
								"TR"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Share Structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b97b4f0b-1829-4278-961a-8c96c909ab0f",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('should return JSON', function () {",
									"    pm.response.to.have.header('Content-Type', 'application/json');",
									"});",
									"",
									"pm.test(\"Returns the share structure\", () => {",
									"    pm.expect(jsonData.shareClasses).to.exist",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/businesses/BC/{{businessIdentifier}}/sharestructure",
							"host": [
								"{{url}}"
							],
							"path": [
								"businesses",
								"BC",
								"{{businessIdentifier}}",
								"sharestructure"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Resolutions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1542460b-75df-45bc-b54d-e6c3610cbbd6",
								"exec": [
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns the resolution dates\", () => {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData.resolutionDates).to.exist",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/businesses/BC/{{businessIdentifier}}/resolutions",
							"host": [
								"{{url}}"
							],
							"path": [
								"businesses",
								"BC",
								"{{businessIdentifier}}",
								"resolutions"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0ab516cd-2040-4498-9d1b-034ef9b94ecd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "568a0c0a-b569-4524-a17b-a35a39e56139",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}